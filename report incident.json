const express = require("express");
const multer = require("multer");
const path = require("path");
const fs = require("fs");

const app = express();
const PORT = 3000;

// Directory to store uploaded files
const UPLOADS_DIR = path.join(__dirname, "uploads");

// Ensure the uploads directory exists
if (!fs.existsSync(UPLOADS_DIR)) {
    fs.mkdirSync(UPLOADS_DIR);
}

// Configure Multer for file uploads
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, UPLOADS_DIR); // Save files in the "uploads" directory
    },
    filename: (req, file, cb) => {
        const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
        cb(null, `${uniqueSuffix}-${file.originalname}`); // Rename the file to ensure uniqueness
    },
});

// File filter to validate uploaded file types
const fileFilter = (req, file, cb) => {
    if (file.mimetype.startsWith("image/")) {
        cb(null, true); // Accept image files
    } else {
        cb(new Error("Only image files are allowed!"), false); // Reject other file types
    }
};

// Multer upload middleware
const upload = multer({
    storage,
    fileFilter,
    limits: { fileSize: 2 * 1024 * 1024 }, // Limit file size to 2MB
});

// Middleware to parse form data
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Route to handle file uploads
app.post("/upload-endpoint", upload.single("image"), (req, res) => {
    try {
        // Access other form data
        const { incidentType, incidentDetails, latitude, longitude, intensity } = req.body;

        // Access the uploaded file information
        const uploadedFile = req.file;

        if (!uploadedFile) {
            return res.status(400).json({ error: "No file uploaded or invalid file type." });
        }

        // Log the incident report
        console.log("Incident Report:");
        console.log({
            incidentType,
            incidentDetails,
            location: { latitude, longitude },
            intensity,
            filePath: uploadedFile.path,
        });

        // Respond to the client
        res.status(200).json({
            message: "Incident reported successfully!",
            data: {
                incidentType,
                incidentDetails,
                latitude,
                longitude,
                intensity,
                uploadedFile: {
                    originalName: uploadedFile.originalname,
                    fileName: uploadedFile.filename,
                    filePath: uploadedFile.path,
                },
            },
        });
    } catch (error) {
        console.error("Error handling upload:", error);
        res.status(500).json({ error: "An error occurred while processing the upload." });
    }
});

// Error-handling middleware for file upload errors
app.use((err, req, res, next) => {
    if (err instanceof multer.MulterError) {
        // Multer-specific errors
        return res.status(400).json({ error: err.message });
    } else if (err) {
        // General errors
        return res.status(400).json({ error: err.message });
    }
    next();
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
